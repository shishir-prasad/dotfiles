#+TITLE:Config Doom Emacs
#+PRIORITIES: header-args :tangle config.el

* User Details
$DOOMDIR/config.el -*- lexical-binding: t; -*-
Place your private configuration here! Remember, you do not need to run 'door
sync' after modifying this file!
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src elisp

(setq user-full-name "Shishir Prasad"
      user-mail-address "shishir@ibrew-hub.com")

#+end_src

* Width and Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
    doom-variable-pitch-font (font-spec :family "sans" :size 13))

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src elisp

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 2)                                                        ; Set width for tabs

#+end_src

* Dired File
The configurations for Dired file manager and kebindings are mentioned here
#+begin_src elisp

(map! :leader
 (:prefix-map("d" . "Dired")
      :desc "Dired"
      "d" #'dired
      :leader
      :desc "Dired jump to current"
      "j" #'dired-jump
      (:after dired
       (:map dired-mode-map
        :leader
        :desc "Peep-dired image previews"
        "p" #'peep-dired
        :leader
        :desc "Dired view file"
        "v" #'dired-view-file))))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

(setq doom-theme 'doom-acario-dark)

;(setq doom-theme 'doom-dracula)
;(setq doom-dracula-brighter-comments t)
#+end_src

* Edit file shortcuts
The shortcuts for editing

#+begin_src elisp

( map! :leader
       (:prefix-map ("e" . "Edit and EWW")
       :desc "Edit agenda file"
       "a" #'(lambda () (interactive) (find-file "~/Org/agenda.org"))
       :leader
       :desc "Edit doom config.org"
       "c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
       :leader
       :desc "Edit eshell aliases"
       "e" #'(lambda () (interactive) (find-file "~/.doom.d/aliases"))
       :leader
       :desc "Edit doom init.el"
       "i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
       :leader
       :desc "Edit doom packages.el"
       "p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el"))))

#+end_src
* Org
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp

(defun org-journal-file-header-func (time)
  "Custom function to create journal header."
  (concat
   (pcase org-journal-file-type
     (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
     (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
     (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
     (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))


(after! org
  (require 'org-bullets)  ; Nicer bullets in org-mode
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/org/"
        org-agenda-files '("~/org/gtd/projects.org"
                           "~/org/gtd/meetings.org"
                           "~/org/gtd/home.org"
                           "~/org/gtd/work.org"
                           "~/org/gtd/ideas.org"
                           "~/org/gtd/inbox.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " â–¼ "
        org-log-done 'time
        org-journal-dir "~/org/gtd/journal/"
        org-journal-enable-agenda-integration t
        org-journal-file-type 'monthly
        org-journal-file-format "%B,%Y.org"
        org-journal-carryover-items "TODO=\"TODO\"|TODO=\"NEXT\"|TODO=\"PROJ\"|TODO=\"STRT\"|TODO=\"WAIT\"|TODO=\"HOLD\""
        org-journal-date-format "%B %d, %Y (%A)"

        org-journal-file-header 'org-journal-file-header-func
        org-hide-emphasis-markers t
        org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "PROJ(p)"  ; Project with multiple task items.
           "NEXT(n)"  ; Task is next to be worked on.
           "WAIT(w)"  ; Something external is holding up this task
           "|"
           "DONE(d)"  ; Task successfully completed
           "KILL(k)")))) ; Task was cancelled, aborted or is no longer applicable
#+end_src

* Line Numbers 
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src elisp

(setq display-line-numbers-type t)

#+end_src
* Escape Sequence
Escape sequence
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(map! :i "jh" #'evil-force-normal-state)
Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* EWW
The configurations required for browsing websites
#+begin_src elisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Eww web browser"
      "e w" #'eww
      :leader
      :desc "Eww reload page"
      "e R" #'eww-reload
      :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words)
#+end_src

* Encoding Format
Set utf-8 as default encoding format
#+begin_src elisp
(set-charset-priority 'unicode)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

* Remapping keys to Programming Dvorak
The goto command keys are remapped to a,o,e,u,i,d,h,t,n,s
#+begin_src elisp
(setq avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
#+end_src
